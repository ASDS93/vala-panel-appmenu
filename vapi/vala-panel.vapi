/* vala-panel.vapi generated by valac 0.28.0, do not modify. */

namespace ValaPanel {
	namespace Configurator {
		[CCode (cheader_filename = "vala-panel.h")]
		public static Gtk.Dialog generic_config_dlg (string title, ValaPanel.Toplevel toplevel, ValaPanel.Applet applet, ...);
	}
	namespace Data {
		[CCode (cheader_filename = "vala-panel.h")]
		public const string CONFIG;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string EXPANDABLE;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string ONE_PER_SYSTEM;
	}
	namespace Key {
		[CCode (cheader_filename = "vala-panel.h")]
		public const string ALIGNMENT;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string AUTOHIDE;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string BACKGROUND_COLOR;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string BACKGROUND_FILE;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string CORNERS_SIZE;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string DOCK;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string DYNAMIC;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string EDGE;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string FONT;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string FONT_SIZE_ONLY;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string FOREGROUND_COLOR;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string HEIGHT;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string ICON_SIZE;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string MARGIN;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string MONITOR;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string SHOW_HIDDEN;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string STRUT;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string USE_BACKGROUND_COLOR;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string USE_BACKGROUND_FILE;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string USE_FONT;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string USE_FOREGROUND_COLOR;
		[CCode (cheader_filename = "vala-panel.h")]
		public const string WIDTH;
	}
	[CCode (cheader_filename = "vala-panel.h", cname = "PanelApplet")]
	public abstract class Applet : Gtk.EventBox {
		public Applet (ValaPanel.Toplevel top, GLib.Settings? s, uint num);
		public abstract void create ();
		public void init_background ();
		public void menu_position_func (Gtk.Menu m, out int x, out int y, out bool push);
		public void popup_position_helper (Gtk.Widget popup, out int x, out int y);
		public void set_popup_position (Gtk.Widget popup);
		public virtual void update_context_menu (ref GLib.Menu parent_menu);
		public Gtk.Widget background_widget { get; set; }
		public uint number { get; construct; }
		public GLib.Settings? settings { get; construct; }
		public ValaPanel.Toplevel toplevel { get; construct; }
	}
	[CCode (cheader_filename = "vala-panel.h")]
	public class IconGrid : Gtk.Container, Gtk.Orientable {
		public IconGrid (Gtk.Orientation or, int cw, int ch, int sp, uint b, int td);
		public override void add (Gtk.Widget w);
		public override void forall_internal (bool incl, Gtk.Callback call);
		public int get_child_position (Gtk.Widget w);
		public override void get_preferred_height (out int min, out int nat);
		public override void get_preferred_width (out int min, out int nat);
		public override void map ();
		public override void realize ();
		public override void remove (Gtk.Widget w);
		public void reorder_child (Gtk.Widget child, int position);
		public void set_geometry (Gtk.Orientation or, int chw, int chh, int sp, int b, int td);
		public override void size_allocate (Gtk.Allocation a);
		public override void unmap ();
		public override void unrealize ();
		public bool aspect { get; set; }
		public int child_height { get; set construct; }
		public int child_width { get; set construct; }
		public bool constrain { get; set; }
		public bool fill_width { get; set; }
		public Gtk.Orientation orientation { get; set; }
		public int spacing { get; set construct; }
		public int target_dimension { get; set construct; }
	}
	[CCode (cheader_filename = "vala-panel.h", cname = "GtkStackSidebar")]
	public class StackSidebar : Gtk.Bin {
		public StackSidebar ();
		public Gtk.Stack? stack { get; set construct; }
	}
	[CCode (cheader_filename = "vala-panel.h", cname = "PanelToplevel")]
	public class Toplevel : Gtk.ApplicationWindow {
		public const string[] anames;
		public const string[] gnames;
		protected override bool button_press_event (Gdk.EventButton e);
		protected override bool configure_event (Gdk.EventConfigure e);
		[CCode (returns_floating_reference = true)]
		public static ValaPanel.Toplevel create (Gtk.Application app, string name, int mon, Gtk.PositionType e);
		protected override void get_preferred_height (out int min, out int nat);
		protected override void get_preferred_width (out int min, out int nat);
		[CCode (returns_floating_reference = true)]
		public static ValaPanel.Toplevel? load (Gtk.Application app, string config_file, string config_name);
		protected override bool map_event (Gdk.EventAny e);
		protected override void size_allocate (Gtk.Allocation alloc);
		public ValaPanel.AlignmentType alignment { get; internal set; }
		public bool autohide { get; internal set; }
		public string background_color { owned get; internal set; }
		public string background_file { get; internal set; }
		public bool dock { get; internal set; }
		public Gtk.PositionType edge { get; internal set construct; }
		public string font { get; internal set; }
		public uint font_size { get; internal set; }
		public bool font_size_only { get; internal set; }
		public string foreground_color { owned get; internal set; }
		public int height { get; internal set; }
		public uint icon_size { get; internal set; }
		public bool is_dynamic { get; internal set; }
		public int monitor { get; internal set construct; }
		public Gtk.Orientation orientation { get; }
		public int panel_margin { get; internal set; }
		public string panel_name { get; internal construct; }
		public uint round_corners_size { get; internal set; }
		public bool show_hidden { get; internal set; }
		public bool strut { get; internal set; }
		public bool use_background_color { get; internal set; }
		public bool use_background_file { get; internal set; }
		public bool use_font { get; internal set; }
		public bool use_foreground_color { get; internal set; }
		public int width { get; internal set; }
	}
	[CCode (cheader_filename = "vala-panel.h")]
	public interface AppletConfigurable {
		[CCode (returns_floating_reference = true)]
		public abstract Gtk.Dialog get_config_dialog ();
	}
	[CCode (cheader_filename = "vala-panel.h")]
	public interface AppletMenu {
		public abstract void show_system_menu ();
	}
	[CCode (cheader_filename = "vala-panel.h")]
	public interface AppletPlugin : Peas.ExtensionBase {
		public abstract ValaPanel.Applet get_applet_widget (ValaPanel.Toplevel toplevel, GLib.Settings? settings, uint number);
	}
	[CCode (cheader_filename = "vala-panel.h")]
	public enum AlignmentType {
		START,
		CENTER,
		END
	}
	[CCode (cheader_filename = "vala-panel.h")]
	public enum AppletPackType {
		START,
		CENTER,
		END
	}
	[CCode (cheader_filename = "vala-panel.h")]
	public enum GenericConfigType {
		STR,
		INT,
		BOOL,
		FILE,
		FILE_ENTRY,
		DIRECTORY_ENTRY,
		TRIM,
		EXTERNAL
	}
	[CCode (cheader_filename = "vala-panel.h")]
	public static void activate_menu (GLib.SimpleAction simple, GLib.Variant? param, void* data);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void activate_panel_preferences (GLib.SimpleAction simple, GLib.Variant? param, void* data);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void apply_window_icon (Gtk.Window w);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void scale_button_set_range (Gtk.ScaleButton b, int lower, int upper);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void scale_button_set_value_labeled (Gtk.ScaleButton b, int val);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void settings_as_action (GLib.ActionMap map, GLib.Settings settings, string prop);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void settings_bind (GLib.Object map, GLib.Settings settings, string prop);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void setup_button (Gtk.Button b, Gtk.Image? img = null, string? label = null);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void setup_icon (Gtk.Image img, GLib.Icon icon, ValaPanel.Toplevel? top = null, int size = -1);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void setup_icon_button (Gtk.Button btn, GLib.Icon? icon = null, string? label = null, ValaPanel.Toplevel? top = null);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void setup_label (Gtk.Label label, string text, bool bold, double factor);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void start_panels_from_dir (Gtk.Application app, string dirname);
}
namespace PanelCSS {
	[CCode (cheader_filename = "vala-panel.h")]
	public static Gtk.CssProvider? add_css_to_widget (Gtk.Widget w, string css);
	[CCode (cheader_filename = "vala-panel.h")]
	public static Gtk.CssProvider? apply_from_file_to_app_with_provider (string file);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void apply_from_resource (Gtk.Widget w, string file, string klass);
	[CCode (cheader_filename = "vala-panel.h")]
	public static Gtk.CssProvider? apply_from_resource_with_provider (Gtk.Widget w, string file, string klass);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void apply_with_class (Gtk.Widget w, string css, string klass, bool add);
	[CCode (cheader_filename = "vala-panel.h")]
	public static Gtk.CssProvider? apply_with_provider (Gtk.Widget w, string css, string klass);
	[CCode (cheader_filename = "vala-panel.h")]
	public static string generate_background (string? name, Gdk.RGBA color);
	[CCode (cheader_filename = "vala-panel.h")]
	public static string generate_flat_button (Gtk.Widget w, Gtk.PositionType e);
	[CCode (cheader_filename = "vala-panel.h")]
	public static string generate_font_color (Gdk.RGBA color);
	[CCode (cheader_filename = "vala-panel.h")]
	public static string generate_font_label (double size, bool bold);
	[CCode (cheader_filename = "vala-panel.h")]
	public static string generate_font_size (int size);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void toggle_class (Gtk.Widget w, string klass, bool apply);
}
namespace MenuMaker {
	[CCode (cheader_filename = "vala-panel.h")]
	public const string ATTRIBUTE_DND_SOURCE;
	[CCode (cheader_filename = "vala-panel.h")]
	public const string ATTRIBUTE_TOOLTIP;
	[CCode (cheader_filename = "vala-panel.h")]
	public const Gtk.TargetEntry[] menu_targets;
	[CCode (cheader_filename = "vala-panel.h")]
	public static void activate_menu_launch_command (GLib.SimpleAction? action, GLib.Variant? param);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void activate_menu_launch_id (GLib.SimpleAction action, GLib.Variant? param);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void activate_menu_launch_uri (GLib.SimpleAction action, GLib.Variant? param);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void append_all_sections (GLib.Menu menu1, GLib.MenuModel menu2);
	[CCode (cheader_filename = "vala-panel.h")]
	public static void apply_menu_properties (GLib.List<Gtk.Widget> w, GLib.MenuModel menu);
}
namespace Config {
}
